{"version":3,"file":"DataTable.spec.js","sourceRoot":"","sources":["../../src/DataTable.spec.ts"],"names":[],"mappings":"","sourcesContent":["// // import {describe, it, expect, beforeEach, async} from \"@angular/core/testing\";\n// // import {} from 'jasmine';\n// import {SimpleChange} from \"@angular/core\";\n// import {DataTable} from \"./DataTable\";\n// import {RowSelector} from \"./RowSelector\";\n\n// describe(\"DataTable directive tests\", ()=> {\n//     let datatable: DataTable;\n\n//     beforeEach(()=> {\n//         datatable = new DataTable();\n//         datatable.inputData = [\n//             {\n//                 id: 3,\n//                 name: 'Poland'\n//             },\n//             {\n//                 id: 1,\n//                 name: 'Slovakia'\n//             },\n//             {\n//                 id: 2,\n//                 name: 'Czech'\n//             },\n//             {\n//                 id: 5,\n//                 name: 'Hungary'\n//             },\n//             {\n//                 id: 4,\n//                 name: 'Ukraine'\n//             },\n//             {\n//                 id: 6,\n//                 name: 'prune'   \n//             },\n//             {\n//                 id: 7,\n//                 name: 'player'\n//             }\n//         ];\n//     });\n\n//     describe(\"initializing\", ()=> {\n\n//         it(\"data should be empty array if inputData is undefined or null\", () => {\n//             let datatable = new DataTable();\n//             datatable.ngDoCheck();\n//             expect(datatable.data).toEqual([]);\n//         });\n\n//         it(\"data should be equal to inputData\", ()=> {\n//             datatable.ngDoCheck();\n//             expect(datatable.data).toEqual(datatable.inputData);\n//         });\n\n//         it(\"data should be 2 first items\", ()=> {\n//             datatable.rowsOnPage = 2;\n//             datatable.ngDoCheck();\n//             expect(datatable.data).toEqual([{\n//                 id: 3,\n//                 name: 'Poland'\n//             }, {\n//                 id: 1,\n//                 name: 'Slovakia'\n//             }]);\n//         });\n\n//         it(\"data should be 3. and 4. items\", ()=> {\n//             datatable.rowsOnPage = 2;\n//             datatable.activePage = 2;\n//             datatable.ngDoCheck();\n//             expect(datatable.data).toEqual([{\n//                 id: 2,\n//                 name: 'Czech'\n//             }, {\n//                 id: 5,\n//                 name: 'Hungary'\n//             }]);\n//         });\n\n//         it(\"shouldn't recalculate data when no changes\", ()=> {\n//             datatable.ngDoCheck();\n//             let data = datatable.data;\n//             datatable.ngDoCheck();\n//             expect(datatable.data).toBe(data);\n//         });\n//     });\n\n//     describe(\"pagination\", ()=> {\n\n//         beforeEach(()=> {\n//             datatable.rowsOnPage = 2;\n//             datatable.ngDoCheck();\n//         });\n\n//         it(\"should return current page settings\", ()=> {\n//             expect(datatable.getPage()).toEqual({\n//                 activePage: 1,\n//                 rowsOnPage: 2,\n//                 dataLength: 5\n//             });\n//         });\n\n//         it(\"data should be 3. and 4. items when page change\", ()=> {\n//             datatable.setPage(2, 2);\n//             datatable.ngDoCheck();\n//             expect(datatable.data).toEqual([{\n//                 id: 2,\n//                 name: 'Czech'\n//             }, {\n//                 id: 5,\n//                 name: 'Hungary'\n//             }]);\n//         });\n\n//         it(\"data should be three first items when page change\", ()=> {\n//             datatable.setPage(1, 3);\n//             datatable.ngDoCheck();\n//             expect(datatable.data).toEqual([{\n//                 id: 3,\n//                 name: 'Poland'\n//             }, {\n//                 id: 1,\n//                 name: 'Slovakia'\n//             }, {\n//                 id: 2,\n//                 name: 'Czech'\n//             }]);\n//         });\n\n//         it(\"data should be two last items when page change\", ()=> {\n//             datatable.setPage(2, 3);\n//             datatable.setPage(2, 3);\n//             datatable.ngDoCheck();\n//             expect(datatable.data).toEqual([{\n//                 id: 5,\n//                 name: 'Hungary'\n//             }, {\n//                 id: 4,\n//                 name: 'Ukraine'\n//             }]);\n//         });\n//     });\n\n//     describe(\"sorting\", ()=> {\n\n//         it(\"id should return current sort setting\", () => {\n//             datatable.setSort(\"id\", \"desc\");\n//             expect(datatable.getSort()).toEqual({\n//                 sortBy: \"id\",\n//                 sortOrder: \"desc\"\n//             });\n//         });\n\n//         it(\"shouldn't refresh data when set page with same settings\", ()=> {\n//             datatable.setSort(\"name\", \"asc\");\n//             datatable.ngDoCheck();\n//             let data = datatable.data;\n//             datatable.setSort(\"name\", \"asc\");\n//             datatable.ngDoCheck();\n//             expect(datatable.data).toEqual(data);\n//         });\n\n//         it(\"should sort case insensitive data ascending by name\", ()=> {\n//             datatable.setSort(\"name\", \"asc\");\n//             datatable.ngDoCheck();\n//             expect(datatable.data).toEqual([\n//                 {\n//                     id: 2,\n//                     name: 'Czech'\n//                 },\n//                 {\n//                     id: 5,\n//                     name: 'Hungary'\n//                 },\n//                 {\n//                     id: 7,\n//                     name: 'player'\n//                 },\n//                 {\n//                     id: 3,\n//                     name: 'Poland'\n//                 },\n//                 {\n//                     id: 6,\n//                     name: 'prune'\n//                 },\n//                 {\n//                     id: 1,\n//                     name: 'Slovakia'\n//                 },\n//                 {\n//                     id: 4,\n//                     name: 'Ukraine'\n//                 }\n//             ])\n//         });\n//     });\n\n//     describe(\"row selecting\", ()=> {\n\n//         it(\"selected entities should only contain entities that are selected\", () => {\n//             let entities = datatable.inputData;\n//             datatable.ngDoCheck();\n\n//             let rowselectors = new Array<RowSelector>();\n//             entities.forEach(x => {\n//                 let rowSelector = new RowSelector(datatable);\n//                 rowSelector.entity = x;\n//                 rowselectors.push(rowSelector);\n//             });\n\n//             // Fake the interaction between the datatable directive\n//             // and rowselector component that would normally be\n//             // provided through angular2 template.\n//             rowselectors[0].onChange();\n//             datatable.addRemoveSelectedEntity(rowselectors[0].entity);\n//             rowselectors[1].onChange();\n//             datatable.addRemoveSelectedEntity(rowselectors[1].entity);\n//             rowselectors[0].onChange();\n//             datatable.addRemoveSelectedEntity(rowselectors[0].entity);\n\n//             expect(datatable.selectedEntities.length).toEqual(1);\n//         });\n\n//         it(\"should select all entities when all rows are selected\", () => {\n//             datatable.selectAllRows();\n//             expect(datatable.selectedEntities.length).toEqual(5);\n//         });\n\n//         it(\"should deselect all entities when all rows are deselected\", () => {\n//             datatable.selectAllRows();\n//             datatable.deselectAllRows();\n//             expect(datatable.selectedEntities.length).toEqual(0);\n//         });\n\n//     });\n\n//     describe(\"adding input data\", ()=> {\n\n//         it(\"should add a row of data to the table\", () => {\n//             let newData = {\n//                 id: 6,\n//                 name: 'United States'\n//             }\n//             datatable.ngDoCheck();\n//             datatable.inputData.push(newData);\n//             datatable.ngDoCheck();\n//             expect(datatable.data).toEqual([\n//                 {\n//                     id: 3,\n//                     name: 'Poland'\n//                 },\n//                 {\n//                     id: 1,\n//                     name: 'Slovakia'\n//                 },\n//                 {\n//                     id: 2,\n//                     name: 'Czech'\n//                 },\n//                 {\n//                     id: 5,\n//                     name: 'Hungary'\n//                 },\n//                 {\n//                     id: 4,\n//                     name: 'Ukraine'\n//                 },\n//                 {\n//                     id: 6,\n//                     name: 'United States'\n//                 }\n//             ])\n//         });\n\n//     });\n\n//     describe(\"removing input data\", ()=> {\n\n//         it(\"should remove a row of data from the table\", () => {\n//             datatable.ngDoCheck();\n//             datatable.inputData.pop();\n//             datatable.ngDoCheck();\n//             expect(datatable.data).toEqual([\n//                 {\n//                     id: 3,\n//                     name: 'Poland'\n//                 },\n//                 {\n//                     id: 1,\n//                     name: 'Slovakia'\n//                 },\n//                 {\n//                     id: 2,\n//                     name: 'Czech'\n//                 },\n//                 {\n//                     id: 5,\n//                     name: 'Hungary'\n//                 }\n//             ])\n//         });\n\n//     });\n// });\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}